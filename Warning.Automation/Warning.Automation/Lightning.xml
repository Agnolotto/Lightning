<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lightning</name>
    </assembly>
    <members>
        <member name="T:TidalWave.IdentifyYear">
            <summary>
            Container for Finding the Revit Version of a Revit File.
            </summary>
        </member>
        <member name="M:TidalWave.IdentifyYear.GetRevitYearList(System.String[],System.String)">
            <summary>
            Used to get the Year Version of a Single Revit File. This takes a list of possible folder locations and a project number, or searching criteria, to identify.
            </summary>
            <param name="FilePath">An array (list) of folders where the Revit files may be located. Attempt to scope to the lowest folders, i.e. do not enter c:/</param>
            <param name="prjNum">The nomenclature of what to look for. Example: 14565_ Revit File_ R18.rvt, you should insert 14565 as a string.</param>
            <returns></returns>
        </member>
        <member name="M:TidalWave.IdentifyYear.GetRevitYearSingle(System.String,System.String)">
            <summary>
            Used to get the Year Version of a Single Revit File. This node is used under the larger performing ByFolderPath node as part of the Lightning package.
            </summary>
            <param name="FilePath">Insert the File Path under which the Revit file is located. This should not include the File Name, just the File Path.</param>
            <param name="prjNum">The nomenclature of what to look for. Example: 14565_ Revit File_ R18.rvt, you should insert 14565 as a string.</param>
            <returns>This returns a list of successful Single Revit File Year Version.</returns>
        </member>
        <member name="T:TidalWave.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TidalWave.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TidalWave.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:TidalWave.SQL">
            <summary>
            
            </summary>
        </member>
        <member name="M:TidalWave.SQL.ConnectionOpen(System.String)">
            <summary>
            Open a SQL Connection.
            </summary>
            <param name="dbConnection"></param>
            <returns></returns>
        </member>
        <member name="M:TidalWave.SQL.InsertInto(System.String,System.String[],System.Object[][])">
            <summary>
            Create a string to use as an INSERT INTO command for SQL Databases.
            </summary>
            <param name="Table">The path as a string to the Table.</param>
            <param name="Columns">The column names as a list of strings.</param>
            <param name="Values">The values to be inserted as a list of list.</param>
            <returns>A string containing the INSERT INTO commmand.</returns>
            <search>sql, database, insert, inject, add</search>
        </member>
        <member name="M:TidalWave.SQL.Select(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Select from a Database some Data.
            </summary>
            <param name="Connection"></param>
            <param name="statement"></param>
            <returns>Returns information as strings.</returns>
        </member>
        <member name="M:TidalWave.SQL.Update(System.DateTime,System.Int32,System.Data.SqlClient.SqlConnection)">
            <summary>
            Generates an Update to your SQL Table using 
            </summary>
            <param name="dateEx"></param>
            <param name="key"></param>
            <param name="Connection"></param>
        </member>
        <member name="M:TidalWave.SQL.ConnectionClose(System.Data.SqlClient.SqlConnection)">
            <summary>
            Closes a SQL Connection.
            </summary>
            <param name="Connection">The Connection as a SQLConnection object.</param>
        </member>
        <member name="M:TidalWave.Journal.GetDynamoVersion(System.Object)">
            <summary>
            Find the current Dynamo version
            </summary>
            <param name="revitVersion">The version number of Revit (e.g. 2017).</param>
            <returns>The first three digits of the active Dynamo version.</returns>
        </member>
        <member name="M:TidalWave.Journal.RevitVersionAsInt(System.Object)">
            <summary>
            Returns the Revit version (entered as string, double or integer) as an integer
            </summary>
            <param name="revitVersion">The version number of Revit (e.g. 2017).</param>
            <returns>The Revit version as an integer</returns>
        </member>
        <member name="M:TidalWave.Journal.CheckFilePath(System.String,System.String)">
            <summary>
            Verifies that the given file path is a valid path for usage in journal files
            </summary>
            <param name="filePath">The file path</param>
            <param name="paramName">The name of the parameter for the path</param>
            <returns>A boolean to indicate success/failure</returns>
        </member>
        <member name="M:TidalWave.Journal.BuildJournalStart(System.Boolean)">
            <summary>
            Builds the first part of the journal string
            </summary>
            <param name="debugMode">Should the journal file be run in debug mode?</param>
            <returns>The first part of the journal string.</returns>
        </member>
        <member name="M:TidalWave.Journal.BuildProjectOpen(System.String,System.Boolean,System.Boolean)">
            <summary>
            Builds the part of the journal string responsible for opening a project
            </summary>
            <param name="revitFilePath">The path to the Revit file. This can be an .rvt or .rfa file.</param>
            <param name="circumventPerspectiveViews">Should the document switch to the default 3D view?</param>
            <returns>The part of the journal string responsible for opening a project.</returns>
        </member>
        <member name="M:TidalWave.Journal.BuildDynamoLaunch(System.String,System.Object,System.String)">
            <summary>
            Builds the part of the journal string responsible for launching DynamoRevit
            </summary>
            <param name="workspacePath">The path to the Dynamo workspace.</param>
            <param name="revitVersion">The version number of Revit (e.g. 2017).</param>
            <param name="dynVersion">The version number of Dynamo (e.g. 1.3).</param>
            <returns>The part of the journal string responsible for launching DynamoRevit.</returns>
        </member>
        <member name="M:TidalWave.Journal.BuildProjectPurge">
            <summary>
            Builds the part of the journal string responsible for purging the model
            </summary>
            <returns>The part of the journal string responsible for purging the model.</returns>
        </member>
        <member name="M:TidalWave.Journal.BuildProjectSave">
            <summary>
            Builds the part of the journal string responsible for saving a project
            </summary>
            <returns>The part of the journal string responsible for saving a project.</returns>
        </member>
        <member name="M:TidalWave.Journal.BuildProjectClose">
            <summary>
            Builds the part of the journal string responsible for closing a project
            </summary>
            <returns>The part of the journal string responsible for closing a project.</returns>
        </member>
        <member name="M:TidalWave.Journal.BuildJournalEnd">
            <summary>
            Builds the last part of the journal string
            </summary>
            <returns>The last part of the journal string.</returns>
        </member>
        <member name="M:TidalWave.Journal.DeleteJournalFile(System.String)">
            <summary>
            Deletes the journal file if it already exists.
            </summary>
            <param name="journalFilePath">The path of the generated journal file.</param>
        </member>
        <member name="M:TidalWave.Journal.WriteJournalFile(System.String,System.String,System.String,System.Int32)">
            <summary>
            Writes the journal file.
            </summary>
            <param name="journalFilePath">The path of the generated journal file.</param>
            <param name="journalString">The string for the journal file.</param>
        </member>
        <member name="M:TidalWave.Journal.PurgeModel(System.String,System.String)">
            <summary>
            Create a journal file for purging and subsequently saving a Revit file.
            
            </summary>
            <param name="revitFilePath">The path to the Revit file. This can be an .rvt or .rfa file. The path may not contain whitespace or accented characters.</param>
            <param name="journalFilePath">The path of the generated journal file.</param>
            <returns>The path of the generated journal file.</returns>
        </member>
        <member name="M:TidalWave.Journal.PurgeModels(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Create a journal file for purging and subsequently saving multiple Revit files in a single Revit session.
            
            </summary>
            <param name="revitFilePaths">The paths to the Revit files. These can be .rvt or .rfa files. The paths may not contain whitespace or accented characters.</param>
            <param name="journalFilePath">The path of the generated journal file.</param>
            <returns>The path of the generated journal file.</returns>
        </member>
        <member name="M:TidalWave.Journal.BySinglePath(System.String,System.String,System.Object,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a journal file for executing a Dynamo workspace on a single Revit file.
            
            This journal file uses several keys specifically for the purpose of automating Dynamo.
            Dynamo is never run in the idle loop. The workspace is executed immediately, and control is returned to the DynamoRevit
            external application.
            </summary>
            <param name="revitFilePath">The path to the Revit file. This can be an .rvt or .rfa file. The path may not contain whitespace or accented characters.</param>
            <param name="workspacePath">The path to the Dynamo workspace. The path may not contain whitespace or accented characters.</param>
            <param name="journalFilePath">The path of the generated journal file.</param>
            <param name="revitVersion">The version number of Revit (e.g. 2017).</param>
            <param name="debugMode">Should the journal file be run in debug mode? Set this to true if you expect models to have warnings (e.g. missing links etc.).</param>
            <param name="circumventPerspectiveViews">Should the document switch to the default 3D view? Set this to true if you expect models will open with a perspective view as last saved view / starting view.</param>
            <returns>The path of the generated journal file.</returns>
        </member>
        <member name="M:TidalWave.Journal.ByFolderPath(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Create a journal file for executing a Dynamo workspace on a Revit file through a list of files.
            
            This journal file uses several keys specifically for the purpose of automating Dynamo.
            Dynamo is never run in the idle loop. The workspace is executed immediately, and control is returned to the DynamoRevit
            external application. This process will find the Revit Version to open for the particular file.
            </summary>
            <param name="workspacePath">The path to the Dynamo workspace. The path may not contain whitespace or accented characters.</param>
            <param name="FolderLocations">The level of Folder Locations to loop through to find the Revit Files.</param>
            <param name="saveLocation">The path where the journal file will be generated.</param>
            <param name="debugMode">Should the journal file be run in debug mode? Set this to true if you expect models to have warnings (e.g. missing links etc.).</param>
            <param name="circumventPerspectiveViews">Should the document switch to the default 3D view? Set this to true if you expect models will open with a perspective view as last saved view / starting view.</param>
            <param name="multithreading">Enable MultiThreading to allow multiple processes to run concurrently.</param>
            <param name="SQLConnectionString">Optional. Add a Connection to your Database to write directly. Else Node will return a list regardless.</param>
            <param name="SQLQuery">Optional. Select the highest key on the main table to insert tracking data.</param>
            <returns>A completed process. Returns a list of Journal files for deletion if desired.</returns>
            <search>journal, file, automation, assessment, test, automatic</search>
        </member>
        <member name="M:TidalWave.Presets.ByWorkspacePathAndSliderNames(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates Presets of all possible combinations of any given Integer Slider values within a Dynamo workspace and adds them to the original workspace file.
            </summary>
            <param name="dynFilePath">The path to the .dyn file.</param>
            <param name="intSliderNames">The names of the Integer Sliders. If more than one Slider has the same name, the node will iterate through all of them.</param>
            <returns>The dynFilePath with the added Presets.</returns>
        </member>
        <member name="M:TidalWave.Presets.ByWorkspacePathSliderNamesAndNewPath(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Creates Presets of all possible combinations of any given Integer Slider values within a Dynamo workspace and adds them to a new preset file.
            </summary>
            <param name="dynFilePath">The path to the .dyn file.</param>
            <param name="intSliderNames">The names of the Integer Sliders. If more than one Slider has this name, the will be all iterated.</param>
            <param name="presetFilePath">File path for the new preset file.</param>
            <returns>The path of the new preset file.</returns>
        </member>
        <member name="M:TidalWave.Presets.Clear(System.String)">
            <summary>
            Remove all Presets from a specified file
            </summary>
            <param name="dynFilePath">The path to the .dyn file.</param>
            <returns>The dynFilePath.</returns>
        </member>
        <member name="T:TidalWave.Process">
            <summary>
            Working with Application's Processes.
            </summary>
        </member>
        <member name="M:TidalWave.Process.ByPathAndArguments(System.String,System.String)">
            <summary>
            Run a process and return the exit code. Used internally as part of the larger Lightning.ByFolderPath node.
            </summary>
            <param name="processPath">The path to the process to execute.</param>
            <param name="args">The command line arguments to the process.</param>
            <returns>The exit code for the process.</returns>
        </member>
        <member name="M:TidalWave.Process.KillCurrentProcess(System.Boolean)">
            <summary>
            Kill the current process and return the exit code.
            ATTENTION: Use carefully! If run in DynamoSandbox this node will kill the DynamoSandbox.exe process, if run in DynamoRevit it will kill the Revit.exe process!
            </summary>
            <param name="toggle">Should the current process be terminted?</param>
            <returns>The exit code for the process.</returns>
        </member>
    </members>
</doc>
